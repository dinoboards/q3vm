OP_UNDEF                Error: VM halt
OP_IGNORE               No operation
OP_BREAK                vm->breakCount++
OP_ADD3
OP_ADD4                 Add integers (two's complement).
OP_ADDF4                Add floats
OP_ARG3                 Marshal argument
OP_ARG4
OP_BAND3
OP_BAND4                 Bitwise AND
OP_BCOM3
OP_BCOM4                 Bitwise COMplement
OP_BLOCK_COPY           memcpy
OP_BOR3
OP_BOR4                  Bitwise OR
OP_BXOR3
OP_BXOR4                 Bitwise eXclusive-OR
OP_CALL                 Call subroutine.
OP_CF4I4                 Convert to float from integer
OP_CI1I3
OP_CI2I3
OP_CI3F4
OP_CI3s4
OP_CI4F4                 Convert to integer from float
OP_CONSTGP3         push address pointer to stack.
OP_CONSTI4
OP_CONSTP3
OP_CONSTs1
OP_CONSTs2
OP_CONSTs3
OP_CONSTU4
OP_CU1I3
OP_CU2I3
OP_CU3U2
OP_CU3U4
OP_CU4I3
OP_CU4U3
OP_CVFI3
OP_CVIU3
OP_CVUI3
OP_DIVF4                 Divide floats
OP_DIVI                 Divide signed integers.
OP_DIVI3
OP_DIVU                 Divide unsigned integers.
OP_DIVU3
OP_ENTER                Begin subroutine.
OP_EQ3
OP_EQ4                   Compare integers, jump if equal.
OP_EQF4                  Compare floats, jump if equal
OP_EQU3
OP_GEF4                  Compare floats, jump if greater-than-or-equal
OP_GEI3
OP_GEI4                  Compare integers, jump if greater-than-or-equal.
OP_GEU3
OP_GEU4                  Compare unsigned integers, jump if greater-than-or-equal
OP_GTF4                  Compare floats, jump if greater-than
OP_GTI3
OP_GTI4                  Compare integers, jump if greater-than.
OP_GTU3
OP_GTU4                  Compare unsigned integers, jump if greater-than
OP_JUMP                 Unconditional jump.
OP_LEAVE                End subroutine.
OP_LEF4                  Compare floats, jump if less-than-or-equal
OP_LEI3
OP_LEI4                  Compare integers, jump if less-than-or-equal.
OP_LEU                  Compare unsigned integers, jump if less-than-or-equal
OP_LEU3
OP_LOAD1                Load 1-byte from memory
OP_LOAD2                Load 2-bytes from memory
OP_LOAD3                Load 3-bytes from memory
OP_LOAD4                Load 4-bytes from memory
OP_LOADF4               Load 4 byte float from memory
OP_LOCAL                Get local variable.
OP_LSH3
OP_LSH4                  Left-shift
OP_LTF                  Compare floats, jump if less-than
OP_LTI3
OP_LTI4                  Compare integers, jump if less-than.
OP_LTU                  Compare unsigned integers, jump if less-than
OP_LTU3
OP_MODI3
OP_MODI4                 Modulus (signed).
OP_MODU3
OP_MODU4                 Modulus (unsigned).
OP_MULF4                 Multiply floats
OP_MULI3
OP_MULI4                 Multiply signed integers.
OP_MULU3
OP_MULU4                 Multiply unsigned integers.
OP_NE3
OP_NE4                   Compare integers, jump if not equal.
OP_NEF                  Compare floats, jump if not-equal
OP_NEGF4                 Negate float
OP_NEGI3
OP_NEGI4                 Negate integer.
OP_POP                  Discard top-of-stack.
OP_PUSH                 Push to stack.
OP_RSHI3
OP_RSHI4                 Right-shift (algebraic; preserve sign)
OP_RSHU3
OP_RSHU4                 Right-shift (bitwise; ignore sign)
OP_STORE1               Store 1-byte to memory
OP_STORE2               Store 2-byte to memory
OP_STORE3
OP_STORE4               *(stack[top-1]) = stack[top]
OP_SUB3
OP_SUB4                  Subtract integers (two's complement).
OP_SUBF4                 Subtract floats
