OP_UNDEF                Error: VM halt
OP_IGNORE               No operation
OP_BREAK                vm->breakCount++
OP_ADD3                 Add int24 (two's complement)
OP_ADD4                 Add int32 (two's complement)
OP_ADDF4                Add floats
OP_ARG3                 Marshal 3 byte argument
OP_ARG4                 Marshal 4 byte argument
OP_BAND3                Bitwise AND int24
OP_BAND4                Bitwise AND int32
OP_BCOM3                Bitwise Complement int24
OP_BCOM4                Bitwise COMplement int32
OP_BLK_CPY           memcpy
OP_BLK_CPY_U1
OP_BLK_CPY_U2
OP_BOR3                 Bitwise OR int24
OP_BOR4                 Bitwise OR int32
OP_BXOR3                Bitwise eXclusive-OR int24
OP_BXOR4                Bitwise eXclusive-OR int32
OP_CALL                 Call subroutine.
OP_CF4I3                Convert float to int24
OP_CF4I4                Convert float to int32
OP_CI1I3                Convert int8 to int24
OP_CI2I3                Convert int16 to int24
OP_CI3F4                Convert int24 to float
OP_CI3s4                Convert int24 to (u)int32
OP_CI4F4                Convert int32 to float
OP_CONSTI3_I1
OP_CONSTI3_I2
OP_CONSTP3              Push address pointer to stack
OP_CONSTs1              Push 1 byte constant
OP_CONSTs2              Push 2 byte constant
OP_CONSTs3              Push 3 byte constant
OP_CONSTs4              Push 4 byte constant
OP_CONSTU3_U1
OP_CONSTU3_U2
OP_CU1I3                Convert uint8 to int24
OP_CU2I3                Convert uint16 to int24
OP_CU3U4                Convert uint24 to uint32
OP_DI                      Disable Interrupts
OP_DIVF4                Divide floats
OP_DIVI3                Divide int24
OP_DIVI4                Divide int32
OP_DIVU3                Divide uint24
OP_DIVU4                Divide uint32
OP_EI                      Enable Interrupts
OP_ENTER                Begin subroutine
OP_EQ3                  Compare (u)int24, jump if ==
OP_EQ4                  Compare (u)int32, jump if ==
OP_GEF4                 Compare floats, jump if >=
OP_GEI3                 Compare int24, jump if >
OP_GEI4                 Compare int32, jump if >=
OP_GEU3                 Compare uint24, jump if >=
OP_GEU4                 Compare uint24, jump if >=
OP_GTF4                 Compare floats, jump if >
OP_GTI3                 Compare int24, jump if >
OP_GTI4                 Compare int32, jump if >
OP_GTU3                 Compare uint24, jump if >
OP_GTU4                 Compare uint32, jump if >
OP_JUMP                 Unconditional jump
OP_LEAVE                End subroutine
OP_LEF4                 Compare floats, jump if <=
OP_LEI3                 Compare int24, jump if <=
OP_LEI4                 Compare int32, jump if <=
OP_LEU3                 Compare uint24, jump if <=
OP_LEU4                 Compare uint32, jump if <=
OP_LOAD1                Load 1-byte from memory
OP_LOAD2                Load 2-bytes from memory
OP_LOAD3                Load 3-bytes from memory
OP_LOAD4                Load 4-bytes from memory
OP_LOCAL                Get local variable (8 bit offset)
OP_LOCAL_FAR            Get local variable (16 bit offset)
OP_LSH3                 left shift (u)int24
OP_LSH4                 Left-shift (u)int32
OP_LTF4                 Compare floats, jump if <
OP_LTI3                 Compare int24, jump if <
OP_LTI4                 Compare int32, jump if <
OP_LTU3                 Compare uint24, jump if <
OP_LTU4                 Compare uint32, jump if <
OP_MODI3                Modulus int24
OP_MODI4                Modulus int32
OP_MODU3                Modulus uint24
OP_MODU4                Modulus uint32
OP_MULF4                Multiply floats
OP_MULI3                Multiple int24
OP_MULI4                Multiply int32
OP_MULU3                Multiply uint24
OP_MULU4                Multiply uint32
OP_NE3                  Compare (u)int24, jump if !=
OP_NE4                  Compare integers, jump if !=
OP_NEF4                 Compare floats, jump if !=
OP_NEGF4                Negate float
OP_NEGI3                Negate int24
OP_NEGI4                Negate int32
OP_POP                  Discard top-of-stack
OP_PUSH                 Push no-value to stack
OP_RSHI3                Right-shift int24 (preserve sign)
OP_RSHI4                Right-shift int32 (preserve sign)
OP_RSHU3                Right-shift uint24
OP_RSHU4                Right-shift uint32
OP_STORE1               Store 1-byte to memory
OP_STORE2               Store 2-byte to memory
OP_STORE3               Store 3-byte to memory
OP_STORE4               Store 4-byte to memory
OP_SUB3                 Subtract (u)int24 (two's complement).
OP_SUB4                 Subtract (u)int32 (two's complement).
OP_SUBF4                Subtract floats
